---
variables: &variables
  SFOS_VERSION: 3.3.0.14
  CARGO_HOME: $CI_PROJECT_DIR/cargo

stages:
  - prepare
  - build
  - test
  - deploy

docker:builder:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: prepare
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo "Working around https://github.com/GoogleContainerTools/kaniko/issues/595"
    - rm -f .dockerignore
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile.builder --build-arg SFOS_VERSION="$SFOS_VERSION" --destination $CI_REGISTRY_IMAGE/builder-$SFOS_VERSION:$CI_COMMIT_REF_SLUG --cache=true

.build-target: &build-target
  image: registry.gitlab.com/rubdos/whisperfish/builder-$SFOS_VERSION:$CI_COMMIT_REF_SLUG
  stage: build
  needs:
    - docker:builder
  artifacts:
    paths:
      - target/*/release/rpmbuild/RPMS/*/*.rpm
  cache:
    paths:
      - target
      - $CARGO_HOME/bin/
      - $CARGO_HOME/registry/index/
      - $CARGO_HOME/registry/cache/
      - $CARGO_HOME/git/db/
    key: target-$MER_ARCH
  script:
    - mkdir -p $CARGO_HOME
    - cp .ci/cargo.toml $CARGO_HOME/config
    - echo "Building for $SFOS_VERSION"
    - echo "Configuring cargo-rpm (cfr https://github.com/RustRPM/cargo-rpm/issues/47)"
    - sed -ie "s/armv7hl/$MER_ARCH/" Cargo.toml
    - sed -ie "s/armv7-unknown-linux-gnueabihf/$RUST_ARCH/" Cargo.toml
    - cat Cargo.toml
    - export MERSDK=$MER_SDK #FIXME
    - export MER_TARGET="SailfishOS-$SFOS_VERSION"
    - export RUSTFLAGS="-C link-args=-Wl,-rpath-link,$MERSDK/targets/$MER_TARGET-$MER_ARCH/usr/lib/,-rpath-link,$MERSDK/targets/$MER_TARGET-$MER_ARCH/lib/"
    - cargo rpm build --verbose

build:armv7hl:
  variables:
    <<: *variables
    MER_ARCH: armv7hl
    RUST_ARCH: armv7-unknown-linux-gnueabihf
    CC_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-gcc
    CXX_armv7_unknown_linux_gnueabihf: arm-linux-gnueabihf-g++
  <<: *build-target

build:i486:
  variables:
    <<: *variables
    MER_ARCH: i486
    RUST_ARCH: i686-unknown-linux-gnu
    CC_i686_unknown_linux_gnu: i686-linux-gnu-gcc
    CXX_i686_unknown_linux_gnu: i686-linux-gnu-g++
  <<: *build-target

.rust: &rust
  cache: &rust-cache
    paths:
      - target/
      - $CARGO_HOME/bin/
      - $CARGO_HOME/registry/index/
      - $CARGO_HOME/registry/cache/
      - $CARGO_HOME/git/db/
  before_script:
    - apt-get update
    - apt-get install -y libsqlcipher-dev qtbase5-dev qt5-qmake cmake qtdeclarative5-dev qt5-default protobuf-compiler
    - cargo --version
    - rustc --version

.rust-stable: &rust-stable
  <<: *rust
  image: rust
  cache:
    <<: *rust-cache
    key: rust-stable

.rust-nightly: &rust-nightly
  <<: *rust
  image: rustlang/rust:nightly
  cache:
    <<: *rust-cache
    key: rust-nightly

build:host:stable:
  <<: *rust-stable
  stage: build
  needs: []
  script:
    - cargo build
    - cargo build --release

build:host:nightly:
  <<: *rust-nightly
  stage: build
  needs: []
  script:
    - cargo build
    - cargo build --release

build:host:nightly:docs:
  <<: *rust-nightly
  stage: build
  needs: []
  script:
    - cargo doc --no-deps
  artifacts:
    paths:
      - target/doc

test:stable:
  <<: *rust-stable
  stage: test
  needs: []
  script:
    - cargo test
    - cargo test --release

test:nightly:
  <<: *rust-nightly
  stage: test
  needs: []
  script:
    - cargo test
    - cargo test --release

coverage:nightly:
  <<: *rust-nightly
  image: xd009642/tarpaulin:develop-nightly
  stage: test
  needs: []
  script:
    - export PATH="$CARGO_HOME/bin:$PATH"
    - cargo tarpaulin -v --exclude-files cargo/*

clippy:
  <<: *rust-nightly
  stage: test
  needs: []
  allow_failure: true
  script:
    - rustup component add clippy
    - cargo clippy

# Jolla/coderus doesn't provide us with aarch64 buildroot.
.build:aarch64:
  variables:
    <<: *variables
    MER_ARCH: aarch64
    RUST_ARCH: aarch64-unknown-linux-gnu
  <<: *build-target

pages:
  dependencies:
    - build:host:nightly:docs
  needs:
    - build:host:nightly:docs
  stage: deploy
  only:
    - master
  script:
    - mkdir -p public
    - mv target/doc public/
  artifacts:
    paths:
      - public
